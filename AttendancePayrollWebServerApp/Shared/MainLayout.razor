@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<DxLayoutBreakpoint MaxWidth="1200"
                    @bind-IsActive="@IsMobileLayout" />
<div class="page">
    <DxGridLayout CssClass="page-layout">
        <Rows>
            @if (IsMobileLayout)
            {
                <DxGridLayoutRow Areas="header" Height="auto"></DxGridLayoutRow>
                <DxGridLayoutRow Areas="sidebar" Height="auto"></DxGridLayoutRow>
                <DxGridLayoutRow Areas="content" />
            }
            else
            {
                <DxGridLayoutRow Areas="header header" Height="auto" />
                <DxGridLayoutRow Areas="@(IsSidebarExpanded ? "sidebar content" : "content content")" />
            }
        </Rows>
        <Columns>
            @if (!IsMobileLayout)
            {
                <DxGridLayoutColumn Width="auto" />
                <DxGridLayoutColumn />
            }
        </Columns>
        <Items>
            <DxGridLayoutItem Area="header" CssClass="layout-item">
                <Template>
                    <Header @bind-ToggleOn="@IsSidebarExpanded" />
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Area="sidebar" CssClass="layout-item">
                <Template>
                    <NavMenu StateCssClass="@NavMenuCssClass" />
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Area="content" CssClass="content px-4 layout-item">
                <Template>
                    @Body
                </Template>
            </DxGridLayoutItem>
        </Items>
    </DxGridLayout>
</div>

@code {
    string? NavMenuCssClass { get; set; }
    bool _isMobileLayout;
    bool IsMobileLayout
    {
        get => _isMobileLayout;
        set
        {
            _isMobileLayout = value;
            IsSidebarExpanded = !_isMobileLayout;
        }
    }

    bool _isSidebarExpanded = true;
    bool IsSidebarExpanded
    {
        get => _isSidebarExpanded;
        set
        {
            if (_isSidebarExpanded != value)
            {
                NavMenuCssClass = value ? "expand" : "collapse";
                _isSidebarExpanded = value;
            }
        }
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         // Start session checking only if not on the login page
    //         if (!NavigationManager.Uri.EndsWith("/Account/Login"))
    //         {
    //             await JSRuntime.InvokeVoidAsync("startSessionCheck", "/Account/Login");
    //         }
    //         NavigationManager.LocationChanged += OnLocationChanged;
    //     }
    // }

    protected override void OnInitialized()
    {
        // Check if user is logged in, if not redirect to login
        if (!SessionHelper.IsLoggedIn && !NavigationManager.Uri.Contains("/login"))
        {
            NavigationManager.LocationChanged += OnLocationChanged;
            StateHasChanged();
        }
    }





    async void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        if (IsMobileLayout)
        {
            IsSidebarExpanded = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("window.location.assign", "/Account/Logout");
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}





@* @inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<DxLayoutBreakpoint MaxWidth="1200"
                    @bind-IsActive="@IsMobileLayout" />
<div class="page">
    <DxGridLayout CssClass="page-layout">
        <Rows>
            @if (IsMobileLayout)
            {
                <DxGridLayoutRow Areas="header" Height="auto"></DxGridLayoutRow>
                <DxGridLayoutRow Areas="sidebar" Height="auto"></DxGridLayoutRow>
                <DxGridLayoutRow Areas="content" />
            }
            else
            {
                <DxGridLayoutRow Areas="header header" Height="auto" />
                <DxGridLayoutRow Areas="@(IsSidebarExpanded ? "sidebar content" : "content content")" />
            }
        </Rows>
        <Columns>
            @if (!IsMobileLayout)
            {
                <DxGridLayoutColumn Width="auto" />
                <DxGridLayoutColumn />
            }
        </Columns>
        <Items>
            <DxGridLayoutItem Area="header" CssClass="layout-item">
                <Template>
                    <Header @bind-ToggleOn="@IsSidebarExpanded" />
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Area="sidebar" CssClass="layout-item">
                <Template>
                    <NavMenu StateCssClass="@NavMenuCssClass" />
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Area="content" CssClass="content px-4 layout-item">
                <Template>
                    @Body
                </Template>
            </DxGridLayoutItem>
        </Items>
    </DxGridLayout>
</div>

@code {
    string? NavMenuCssClass { get; set; }
    bool _isMobileLayout;
    bool IsMobileLayout
    {
        get => _isMobileLayout;
        set
        {
            _isMobileLayout = value;
            IsSidebarExpanded = !_isMobileLayout;
        }
    }

    bool _isSidebarExpanded = true;
    bool IsSidebarExpanded
    {
        get => _isSidebarExpanded;
        set
        {
            if (_isSidebarExpanded != value)
            {
                NavMenuCssClass = value ? "expand" : "collapse";
                _isSidebarExpanded = value;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Start session checking
            await JSRuntime.InvokeVoidAsync("startSessionCheck", "/Account/Login");
            // Subscribe to location changes for mobile layout
            NavigationManager.LocationChanged += OnLocationChanged;
        }
    }

    async void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        if (IsMobileLayout)
        {
            IsSidebarExpanded = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Logout()
    {
        // Call the existing logout endpoint to clear the cookie
        await JSRuntime.InvokeVoidAsync("window.location.assign", "/Account/Logout");
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}



 *@
























@* @inherits LayoutComponentBase
@inject NavigationManager _navigationManager

<DxLayoutBreakpoint MaxWidth="1200"
                    @bind-IsActive="@IsMobileLayout" />
<div class="page">
    <DxGridLayout CssClass="page-layout">
        <Rows>
            @if(IsMobileLayout) {
                <DxGridLayoutRow Areas="header" Height="auto"></DxGridLayoutRow>
                <DxGridLayoutRow Areas="sidebar" Height="auto"></DxGridLayoutRow>
                <DxGridLayoutRow Areas="content" />
            }
            else {
                <DxGridLayoutRow Areas="header header" Height="auto" />
                <DxGridLayoutRow Areas="@(IsSidebarExpanded ? "sidebar content" : "content content")" />
            }
        </Rows>
        <Columns>
            @if(!IsMobileLayout) {
                <DxGridLayoutColumn Width="auto" />
                <DxGridLayoutColumn />
            }
        </Columns>
        <Items>
            <DxGridLayoutItem Area="header" CssClass="layout-item">
                <Template>
                    <Header @bind-ToggleOn="@IsSidebarExpanded" />
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Area="sidebar" CssClass="layout-item">
                <Template>
                    <NavMenu StateCssClass="@NavMenuCssClass" />
                </Template>
            </DxGridLayoutItem>

            <DxGridLayoutItem Area="content" CssClass="content px-4 layout-item">
                <Template>
                    @Body
                </Template>
            </DxGridLayoutItem>
        </Items>
    </DxGridLayout>
    </div>
@code{

    string? NavMenuCssClass { get; set; }
    bool _isMobileLayout;
    bool IsMobileLayout {
        get => _isMobileLayout;
        set {
            _isMobileLayout = value;
            IsSidebarExpanded = !_isMobileLayout;
        }
    }

    bool _isSidebarExpanded = true;
    bool IsSidebarExpanded {
        get => _isSidebarExpanded;
        set {
            if(_isSidebarExpanded != value) {
                NavMenuCssClass = value ? "expand" : "collapse";
                _isSidebarExpanded = value;
            }
        }
    }



    protected override void OnInitialized()
    {
        // Check if user is logged in, if not redirect to login
        if (!SessionHelper.IsLoggedIn && !_navigationManager.Uri.Contains("/login"))
        {
            _navigationManager.LocationChanged += OnLocationChanged;
            StateHasChanged();
        }
    }

    async void OnLocationChanged(object? sender, LocationChangedEventArgs args) {
        if(IsMobileLayout) {
            IsSidebarExpanded = false;
            await InvokeAsync(StateHasChanged);
        }
    }


    private void Logout()
    {
        SessionHelper.Logout();
        _navigationManager.NavigateTo("./", true);
    }

    public void Dispose() {
        _navigationManager.LocationChanged -= OnLocationChanged;
    }
} *@