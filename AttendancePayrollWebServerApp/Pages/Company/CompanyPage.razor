@page "/companypage"
@using AttendancePayrollWebServerApp.Helper
@inject CompanyGateway _companyGateway
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager


@using AttendancePayrollWebServerApp.Service.IService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "companypage_Access")]
@inject IUserPermissionService PermissionService
@inject AuthenticationStateProvider AuthenticationStateProvider


<link rel="stylesheet" href="@($"{baseUrl}css/CustomFieldSizeFontSize.css")">

<div class="row my-0" style="height:5% ; width: 100% ">
    <div class="d-flex justify-content-between align-items-start" style="height:5% ; width: 100%; margin-left: -12px; ">
        <h3 class="card-title text-primary mb-3 ml-3">@title Company</h3>


        @if (title != "Create")
        {
            <button type="button" class="btn btn-primary custom-input" @onclick="@AddNew"
                    style="outline: none; width:auto;">
                Add New Company
            </button>
        }

    </div>
</div>


<div class="row my-0">
    <div class="col-10">
        <EditForm Model="@company" OnValidSubmit="@UpsertCompany">
            <DataAnnotationsValidator />
            <div class="row" style="width: 100% ">
                <div class="col-12 col-lg-8 p-0 ml-4 ml-md-0 mt-4 mt-md-0 " style="width:55% ">


                    <div class="row my-1 align-items-center">
                        <div class="col-3 custom-input">Company Name</div>
                        <div class="col-9">
                            <InputText @bind-Value="company.CompanyName" class="form-control custom-input"></InputText>
                            <ValidationMessage For="()=>company.CompanyName"></ValidationMessage>
                        </div>
                    </div>

                    <div class="row my-1 align-items-center">
                        <div class="col-3 custom-input">Bangla Name</div>
                        <div class="col-9">
                            <InputText @bind-Value="company.CompNameBan" class="form-control custom-input"></InputText>
                            <ValidationMessage For="()=>company.CompNameBan"></ValidationMessage>
                        </div>
                    </div>


                    <div class="row my-1 align-items-center">
                        <div class="col-3 custom-input">Description</div>
                        <div class="col-9">
                            <InputText @bind-Value="company.Description" class="form-control custom-input"></InputText>
                            <ValidationMessage For="()=>company.Description"></ValidationMessage>
                        </div>
                    </div>

                    <div class="row my-1 align-items-center">
                        <div class="col-3 custom-input">Desc Bangla</div>
                        <div class="col-9">
                            <InputText @bind-Value="company.DescriptionBan" class="form-control custom-input"></InputText>
                            <ValidationMessage For="()=>company.DescriptionBan"></ValidationMessage>
                        </div>
                    </div>

                    <div class="row my-1 align-items-center">
                        <div class="col-3 custom-input">Contact</div>
                        <div class="col-9">
                            <InputText @bind-Value="company.Contact" class="form-control custom-input"></InputText>
                            <ValidationMessage For="()=>company.Contact"></ValidationMessage>
                        </div>
                    </div>


                    <div class="row my-1 align-items-center">
                        <div class="col-3 custom-input">HotLine</div>
                        <div class="col-9">
                            <InputText @bind-Value="company.HotLine" class="form-control custom-input"></InputText>
                            <ValidationMessage For="()=>company.HotLine"></ValidationMessage>
                        </div>
                    </div>


                    <div class="row my-1 align-items-center">
                        <div class="col-3 custom-input">Registration</div>
                        <div class="col-9">
                            <InputText @bind-Value="company.CompReg" class="form-control custom-input"></InputText>
                            <ValidationMessage For="()=>company.CompReg"></ValidationMessage>
                        </div>
                    </div>


                    @* <button class="btn btn-primary custom-input" style="outline: none;  margin-left: 145px;  width:150px" >@title</button>   *@
                </div>
            </div>

@* 
            <button type="button" class="btn btn-success" @onclick="SaveCompany" disabled="@(!canAdd)">
                Save Company
            </button>
            *@

            <div class="row" style="width: 100% ">
                <div class="col-12 col-lg-8 p-0 ml-4 ml-md-0 mt-4 mt-md-0 " style="width:55%">
                    <div class="row my-1 align-items-center">
                        <div class="col-3 custom-input"></div>
                        <div class="col-9">
                            @if (title == "Create")
                            {
                                <button class="btn btn-primary custom-input" style="width: 150px;" disabled="@(!canAdd)">@title</button>
                            }
                            else
                            {
                                <button class="btn btn-primary custom-input" style="width: 150px;" disabled="@(!canEdit)">@title</button>
                            }
                        </div>
                    </div>
                </div>
            </div>


        </EditForm>
    </div>
</div>



<div class="row my-1">
    @if (companies != null && companies.Any())
    {
        <DxGrid @ref="GridExp"
                Data="@companies"
                ShowGroupPanel="true"
                ShowFilterRow="true"
                ColumnResizeMode="GridColumnResizeMode.NextColumn"
                PageSizeSelectorVisible="true"
                PageSizeSelectorAllRowsItemVisible="true"
                PageSizeSelectorItems="@(new int[] { 5,8,10,15, 20 })"
                PageSize="8"
                PagerPosition="GridPagerPosition.Bottom"
                TextWrapEnabled="false"
                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                ShowSearchBox="true"
                AutoExpandAllGroupRows="true"
                GroupFooterDisplayMode="GridGroupFooterDisplayMode.IfExpanded"
                SelectionMode="GridSelectionMode.Multiple"
                SelectAllCheckboxMode="GridSelectAllCheckboxMode.AllPages"
                FocusedRowEnabled="@isFocusedRowEnabled" FocusedRowChanged="OnFocusedRowChanged"
                RowClick="OnRowClick">
            <Columns>
                <DxGridSelectionColumn Width="60px" AllowSelectAll="true" />
                <DxGridDataColumn Caption="Company Name" FieldName="CompanyName" SortIndex="0" SortOrder="GridColumnSortOrder.Ascending" />
                <DxGridDataColumn Caption="Bangla Name" FieldName="CompNameBan" SortIndex="0" SortOrder="GridColumnSortOrder.Ascending" />
                <DxGridDataColumn Caption="Description" FieldName="Description" SortIndex="0" SortOrder="GridColumnSortOrder.Ascending" />
                <DxGridDataColumn Caption="Bangla Desc." FieldName="DescriptionBan" SortIndex="0" SortOrder="GridColumnSortOrder.Ascending" />
                <DxGridDataColumn Caption="Contact" FieldName="Contact" SortIndex="0" SortOrder="GridColumnSortOrder.Ascending" />
                <DxGridDataColumn Caption="Hotline" FieldName="HotLine" SortIndex="0" SortOrder="GridColumnSortOrder.Ascending" />
                <DxGridDataColumn Caption="Registration" FieldName="CompReg" SortIndex="0" SortOrder="GridColumnSortOrder.Ascending" />
            </Columns>
            <TotalSummary>
                <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FieldName="CompanyName" />
            </TotalSummary>
        </DxGrid>
    }

    else

    {
        if (IsLoading)
        {
            //Loading gif
            <div class="text-center">

                <img src="@($"{baseUrl}/images/Animation3.gif")">
            </div>
        }
        else
        {
            //no records
            <p>No Records Found.</p>
        }
    }
</div>






@code
{
    private bool canAdd = false;
    private bool canEdit = false;
    private bool canDelete = false;


    private bool IsLoading { get; set; }
    private List<Company> companies = new List<Company>();


    private Company company { get; set; } = new Company();
    //private int count { get; set; } = 0;
    private string title { get; set; } = "Create";
    private int tempId { get; set; } = 0;
    private bool isFocusedRowEnabled { get; set; } = false;
    IGrid? GridExp { get; set; }
    private string baseUrl;


    //IEnumerable<IGrid> GridExp = new IEnumerable<IGrid>();
    //IGrid GridExp { get; set; } = GridEditNewRowPosition.Bottom;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity?.IsAuthenticated != true)
            {
                _navigationManager.NavigateTo("/Account/Login");
                return;
            }

            var userIdClaim = user.FindFirst("UserAccountId");
            if (userIdClaim != null)
            {
                var userId = userIdClaim.Value;
                canAdd = await PermissionService.HasPermissionAsync(userId, "companypage", UserPolicy.ADD_PRODUCT);
                canEdit = await PermissionService.HasPermissionAsync(userId, "companypage", UserPolicy.EDIT_PRODUCT);
                canDelete = await PermissionService.HasPermissionAsync(userId, "companypage", UserPolicy.DELETE_PRODUCT);
            }




            baseUrl = _navigationManager.BaseUri;
            await LoadCompany();
        }
    }









    private async Task LoadCompany()
    {
        IsLoading = true;
        StateHasChanged();
        companies = await _companyGateway.GetCompanyList();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task LoadCompanyId()
    {
        StateHasChanged();
        company = await _companyGateway.GetCompany(tempId);
        company.CompanyName = company.CompanyName;
        company.CompNameBan = company.CompNameBan;
        company.Description = company.Description;
        company.DescriptionBan = company.DescriptionBan;
        company.Contact = company.Contact;
        company.HotLine = company.HotLine;
        company.CompReg = company.CompReg;
        StateHasChanged();
    }

    private async Task UpsertCompany()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst("UserAccountId");
        if (userIdClaim == null || !await PermissionService.HasPermissionAsync(userIdClaim.Value, "companypage", UserPolicy.ADD_PRODUCT))
        {
            await _jsRuntime.InvokeVoidAsync("alert", "You do not have permission to save a company.");
            return;
        }


        else
        {
            bool isExist = await _companyGateway.IsExist(company.CompanyName, company.CompanyId);
            if (isExist)
            {
                await _jsRuntime.ToastrError("Company name already exists");
                return;
            }

            if (title == "Create")
            {
                company = new Company
                    {
                        CompanyName = company.CompanyName,
                        CompNameBan = company.CompNameBan,
                        Description = company.Description,
                        DescriptionBan = company.DescriptionBan,
                        Contact = company.Contact,
                        HotLine = company.HotLine,
                        CompReg = company.CompReg
                    };
                await _companyGateway.Save(company);
                companies.Add(company);
                await _jsRuntime.ToastrSuccess("Company Created Successfully");
                await LoadCompany();
                await LoadCompanyId();
                ResetData();
            }


            if (title == "Update")
            {
                var confirmed = await _jsRuntime.InvokeAsync<bool>("confirmUpdate", "Are you sure you want to update?");
                if (confirmed)
                {
                    // Update the company if confirmed
                    company = new Company
                        {
                            CompanyId = tempId,
                            CompanyName = company.CompanyName,
                            CompNameBan = company.CompNameBan,
                            Description = company.Description,
                            DescriptionBan = company.DescriptionBan,
                            Contact = company.Contact,
                            HotLine = company.HotLine,
                            CompReg = company.CompReg
                        };
                    await _companyGateway.Edit(company);
                    companies.Add(company);
                    await LoadCompany();
                    await _jsRuntime.ToastrSuccess("Company Updated Successfully");
                }
                else
                {
                    await LoadCompany();
                }
            }
        }
    }

    private void ResetData()
    {
        company = new Company();
    }

    private async Task AddNew()
    {
        isFocusedRowEnabled = false;
        title = "Create";
        ResetData();
        await LoadCompany();
        //await _jsRuntime.InvokeVoidAsync("clearSessionData");
    }

    void OnRowClick(GridRowClickEventArgs e)
    {
        isFocusedRowEnabled = true;
        StateHasChanged();
    }

    async Task OnFocusedRowChanged(GridFocusedRowChangedEventArgs e)
    {
        //     if (count == 0)
        //     {
        //         count = 1;
        //         return;
        //     }

        var item = e.DataItem as Company;
        if (item != null)
        {
            tempId = item.CompanyId;
        }

        title = "Update";
        await LoadCompanyId();
    }

    async Task ExportXlsx_Click()
    {
        await GridExp.ExportToXlsxAsync("ExportResult", new GridXlExportOptions()
            {
                //ExportSelectedRowsOnly = ExportSelectedRowsOnly
                ExportSelectedRowsOnly = true
            });
    }
}










 @*

@page "/companypage"
@using AttendancePayrollWebServerApp.Helper
@using AttendancePayrollWebServerApp.Service.IService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "companypage_Access")]

@inject CompanyGateway _companyGateway
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject IUserPermissionService PermissionService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="row my-0">
    <div class="d-flex justify-content-between align-items-start">
        <h3 class="card-title text-primary mb-3 ml-3">Company Management</h3>
        <button type="button" class="btn btn-primary" @onclick="@AddNew" disabled="@(!canAdd)">
            Add New Company
        </button>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <!-- Save Button -->
        <button type="button" class="btn btn-success" @onclick="SaveCompany" disabled="@(!canAdd)">
            Save Company
        </button>

        <!-- Edit Button -->
        <button type="button" class="btn btn-warning" @onclick="EditCompany" disabled="@(!canEdit)">
            Edit Company
        </button>

        <!-- Delete Button -->
        <button type="button" class="btn btn-danger" @onclick="DeleteCompany" disabled="@(!canDelete)">
            Delete Company
        </button>

        <!-- Read-only content -->
        <div class="mt-3">
            <p>Company information display area...</p>
        </div>
    </div>
</div>

@code {
    private bool canAdd = false;
    private bool canEdit = false;
    private bool canDelete = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated != true)
        {
            _navigationManager.NavigateTo("/Account/Login");
            return;
        }

        var userIdClaim = user.FindFirst("UserAccountId");
        if (userIdClaim != null)
        {
            var userId = userIdClaim.Value;
            canAdd = await PermissionService.HasPermissionAsync(userId, "companypage", UserPolicy.ADD_PRODUCT);
            canEdit = await PermissionService.HasPermissionAsync(userId, "companypage", UserPolicy.EDIT_PRODUCT);
            canDelete = await PermissionService.HasPermissionAsync(userId, "companypage", UserPolicy.DELETE_PRODUCT);
        }
    }




    private async Task AddNew()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst("UserAccountId");
        if (userIdClaim == null || !await PermissionService.HasPermissionAsync(userIdClaim.Value, "companypage", UserPolicy.ADD_PRODUCT))
        {
            await _jsRuntime.InvokeVoidAsync("alert", "You do not have permission to add a company.");
            return;
        }
    }

    private async Task SaveCompany()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst("UserAccountId");
        if (userIdClaim == null || !await PermissionService.HasPermissionAsync(userIdClaim.Value, "companypage", UserPolicy.ADD_PRODUCT))
        {
            await _jsRuntime.InvokeVoidAsync("alert", "You do not have permission to save a company.");
            return;
        }
    }

    private async Task EditCompany()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst("UserAccountId");
        if (userIdClaim == null || !await PermissionService.HasPermissionAsync(userIdClaim.Value, "companypage", UserPolicy.EDIT_PRODUCT))
        {
            await _jsRuntime.InvokeVoidAsync("alert", "You do not have permission to edit a company.");
            return;
        }
    }

    private async Task DeleteCompany()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst("UserAccountId");
        if (userIdClaim == null || !await PermissionService.HasPermissionAsync(userIdClaim.Value, "companypage", UserPolicy.DELETE_PRODUCT))
        {
            await _jsRuntime.InvokeVoidAsync("alert", "You do not have permission to delete a company.");
            return;
        }
    }
}
 *@