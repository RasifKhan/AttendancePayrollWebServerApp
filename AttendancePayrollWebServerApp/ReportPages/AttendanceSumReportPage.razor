@page "/attendancesumreportpage"
@using DevExpress.Export
@using AttendancePayrollWebServerApp.Gateway.View
@using AttendancePayrollWebServerApp.Helper
@using AttendancePayrollWebServerApp.Models
@using AttendancePayrollWebServerApp.Models.View
@inject AttendanceSummaryViewGateway _attendanceSummaryViewGateway
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject AttendanceViewGateway _attendanceViewGateway


<link rel="stylesheet" href="@($"{baseUrl}css/CustomFieldSizeFontSize.css")">
<link rel="stylesheet" href="@($"{baseUrl}css/CustomGridHeightwidth.css")">

<div class="row my-0" style="height:5% ; ">
    <div class="d-flex justify-content-between align-items-start" style="height:5% ;  margin-left: -12px; ">
        <h3 class="card-title text-primary mb-3 ml-3">Attendance Summary Report </h3>
        
        @if (attendanceSummaryViewList != null && attendanceSummaryViewList.Any())
        {
             <button type="button" class="btn btn-primary btn-success custom-input" @onclick="ViewPdf_Click " style="outline: none; width:auto;">View Report (PDF)</button>    
        }
    </div>
</div>

<div class="row my-0"  >
    <div class="col-10">
        <div class="row" style="width: 100% ">
            <div class="col-12 col-lg-8 p-0 ml-4 ml-md-0 mt-4 mt-md-0 " style="width:50%">
           @*  <div class="row my-1 align-items-center">
                <div class="col-3 custom-input">Attendance Date</div>
                <div class="col-9">
                    <input type="date" id="fromDate" class="form-control custom-input" @bind="fromDate" />
                </div>
                </div>*@
                                <div class="row my-1 align-items-center">
                                    <div class="col-3 custom-input">From Date</div>
                                    <div class="col-9">
                                        <input type="date" id="fromDate"
                                               class="form-control custom-input @(isFromDateValid ? "" : "is-invalid")"
                                               @bind="fromDate"
                                               @bind:event="oninput"
                                               @onchange="ValidateFromDate" />
                                        @if (!isFromDateValid)
                                        {
                                            <div class="invalid-feedback">
                                                Please enter a valid date.
                                            </div>
                                        }
                                    </div>

                                   

                                <div class="col-3 custom-input">To Date</div>
                                <div class="col-9">
                                    <input type="date" id="toDate"
                                           class="form-control custom-input @(isToDateValid ? "" : "is-invalid")"
                                           @bind="toDate"
                                           @bind:event="oninput"
                                           @onchange="ValidateToDate" />
                                    @if (!isToDateValid)
                                    {
                                        <div class="invalid-feedback">
                                            Please enter a valid date.
                                        </div>
                                    }
                                </div>

                                </div>
            </div> 

            <div class="col-12 col-lg-8 p-0 ml-4 ml-md-0 mt-4 mt-md-0 " style="width:50%">
                 <div class="row my-1 align-items-center">
                        <div class="col-9">
                            <button class="btn btn-primary custom-input ms-2" @onclick="ExecuteStoredProcedure">Show Data</button>
                            @* <button class="btn btn-primary custom-input ms-2" @onclick="ExecuteReport">Report</button> *@
                      </div>
                </div>
            </div>

           @*  <button class="btn btn-primary btn-success" @onclick="ViewPdf_Click">Export To Excel</button> *@

        </div>
    </div>
</div>




<div>
    @if (attendanceSummaryViewList != null && attendanceSummaryViewList.Any())
        {
        <div class="row my-1 dxbl-grid">
                 <DxGrid @ref="GridExp"
                    Data="@attendanceSummaryViewList"
                                        ShowGroupPanel="true"
                                        ShowFilterRow="true"
                                        ColumnResizeMode="GridColumnResizeMode.NextColumn"
                                        PageSizeSelectorVisible="true"
                                        PageSizeSelectorAllRowsItemVisible="true"
                                        PageSizeSelectorItems="@(new int[] { 50,100,150,300,500, 1000 })"
                                        PageSize="150"
                                        PagerPosition="GridPagerPosition.Bottom"
                                        TextWrapEnabled="false"
                                        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                                        ShowSearchBox="true"
                                        AutoExpandAllGroupRows="true"
                                        GroupFooterDisplayMode="GridGroupFooterDisplayMode.IfExpanded"
                                        SelectionMode="GridSelectionMode.Multiple"
                                        SelectAllCheckboxMode="GridSelectAllCheckboxMode.AllPages"
                                        FocusedRowEnabled="false" FocusedRowChanged="OnFocusedRowChanged"
                                        RowClick="OnRowClick"
                                       >
                                     <Columns>
                                                <DxGridSelectionColumn Width="60px" AllowSelectAll="true" />
                                                <DxGridDataColumn Caption="Employee Id" FieldName="EmployeeId" Width="200px" />
                                                <DxGridDataColumn Caption="Employee Name" FieldName="EmployeeName" Width="200px" />
                                                <DxGridDataColumn Caption="Department" FieldName="DepartmentName" Width="200px"  />
                                                <DxGridDataColumn Caption="Section" FieldName="SectionName" Width="150"  />
                                                <DxGridDataColumn Caption="Designation" FieldName="DesignationName" Width="150"  />
                                                <DxGridDataColumn Caption="Work Type" FieldName="worktype" Width="150" />
                                                <DxGridDataColumn Caption="Present" FieldName="P" Width="150" />
                                                <DxGridDataColumn Caption="Absent" FieldName="A" Width="150" />
                                                <DxGridDataColumn Caption="Late" FieldName="L" Width="150" />
                                    </Columns>
                                        <TotalSummary>
                                                <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FieldName="EmployeeName" />
                                        </TotalSummary>
                                    </DxGrid>
               </div>
        }
    else
    {
        if (IsLoading)
        {
            <div class="text-center">
                <img src="@($"{baseUrl}/images/Animation3.gif")">
            </div>
        }
        else
        {
            <p>@recordMessage</p>
        }
    }
</div>




@code {
    private List<AttendanceView> attendances = new List<AttendanceView>();
    private List<AttendanceSummaryView> attendanceSummaryViewList = new List<AttendanceSummaryView>();
    private DateTime fromDate = DateTime.Today;
    private DateTime toDate = DateTime.Today;
    private string? recordMessage { get; set; } = "Click the button to see report...";
    private bool IsLoading { get; set; }
    private int tempId { get; set; } = 0;
    private bool isFocusedRowEnabled { get; set; } = false;
    IGrid? GridExp { get; set; }
    private string baseUrl;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            baseUrl = _navigationManager.BaseUri;
           
            recordMessage = "Click button to see report...";
        }
    }

    private bool isFromDateValid = true;

    private void ValidateFromDate(ChangeEventArgs e)
    {
        if (string.IsNullOrEmpty(e.Value?.ToString()) ||
            fromDate == DateTime.MinValue ||
            fromDate.Year < 1900)
        {
            isFromDateValid = false;
        }
        else
        {
            isFromDateValid = true;
        }
        StateHasChanged();
    }

    private bool isToDateValid = true;

    private void ValidateToDate(ChangeEventArgs e)
    {
        if (string.IsNullOrEmpty(e.Value?.ToString()) ||
            toDate == DateTime.MinValue ||
            toDate.Year < 1900)
        {
            isToDateValid = false;
        }
        else
        {
            isToDateValid = true;
        }
        StateHasChanged();
    }

    void OnRowClick(GridRowClickEventArgs e)
    {
        isFocusedRowEnabled = true;
        StateHasChanged();
    }

    async Task OnFocusedRowChanged(GridFocusedRowChangedEventArgs e)
    {
        var item = e.DataItem as Section;
        if (item != null)
        {
            tempId = item.SectionId;
        }
    }

    


      
    async Task ViewPdf_Click()
    {
        List<AttendanceSummaryView> selectedRowsList = GridExp.SelectedDataItems?.Cast<AttendanceSummaryView>().ToList() ?? new List<AttendanceSummaryView>();
        List<string> distinctEmpId = selectedRowsList.Select(item => item.EmployeeId).Distinct().ToList();
        await _attendanceViewGateway.InsertEmployeeIdsAsync(distinctEmpId);
        baseUrl = _navigationManager.BaseUri;
        string url = $"{baseUrl}api/Reportss/GetAttendanceSummaryReport?reportType=1";
                if (fromDate != null && toDate != null)
                {
                var encodedFromDate = Uri.EscapeDataString(fromDate.ToString("yyyy-MM-dd"));
                var encodedToDate = Uri.EscapeDataString(toDate.ToString("yyyy-MM-dd"));
                url += $"&fromDate={encodedFromDate}&toDate={encodedToDate}";
                }
            await _jsRuntime.InvokeVoidAsync("open", url, "_blank");
    }

    private async Task ExecuteStoredProcedure()
    {
        if (!isFromDateValid || !isToDateValid)
        {
            return;
        }
        IsLoading = true;
        var result= await _attendanceSummaryViewGateway.ExecuteAttendanceSummaryProc(fromDate, toDate);
        if(result.Success)
        {
            attendanceSummaryViewList = await _attendanceSummaryViewGateway.GetAttSumViewListByDate(fromDate, toDate);
            if (attendanceSummaryViewList != null)
            {
                IsLoading = false;
            }
        }
        else
        {
            IsLoading = false;
            recordMessage = result.ToString();
        }
    }

}
